#!/bin/bash

# Defaults, if not overridden by the environment.
if [ -z "$congress" ]; then
    congress=113
fi

if [ -z "$session" ]; then
    session=2014
fi
echo Congress: $congress Session: $session



function usage () {
    program=$(readlink -f "$0")
    program=$(basename "$program")
    echo "USAGE: $program <complete|daily|hourly>"
    exit 1
}


function which_guard () {
    w=$(which "$1")
    if [ -z "$w" ]; then
        echo "You must install $1."
        exit 2
    fi
}

function pid_file_guard () {
    script=$(basename $(readlink -f "$0"))
    pidfile="$HOME/tmp/${script}.pid"
    if [ -f "$pidfile" ]; then
        echo >&2 "Aborting ($mode mode) because another instance of this script is already running. Check $pidfile"
        exit 1
    fi
    trap "rm -f $pidfile" EXIT
    echo $$ > $pidfile
}

function show_pstree () {
    pstree --arguments --compact $$
}

function run_with_tmp_out () {
    dstfile="$1"; shift
    tmpfile=$(mktemp --tmpdir=$HOME/tmp/)
    $@ 2>&1 > "$tmpfile"
    chmod ugo+r "$tmpfile"
    mv "$tmpfile" "$dstfile"
}

function collect_updated_amendments () {
    ssed -R \
         -e '/^\[([sh]amdt)\d+-\d+\] Updated/!d' \
         -e 's/\[([sh]amdt)(\d+)-(\d+)\] Updated/\1\2-\3/' \
         $HOME/tmp/amendments.last | sort -u
}

function collect_updated_bills () {
    ssed -R \
         -e '/^\[(hres|hcres|hjres|hr|scres|sjres|sres|s)\d+-\d+\] Updated/!d' \
         -e 's/\[(hres|hcres|hjres|hr|scres|sjres|sres|s)(\d+)-(\d+)\] Updated/\1\2-\3/' \
         $HOME/tmp/bills.last | sort -u
}

function collect_updated_votes () {
    ssed -R \
         -e '/^\[([sh])(\d+)-(\d+)[.](\d+)\] Updated$/!d' \
         -e 's/^\[([sh])(\d+)-(\d+)[.](\d+)\] Updated$/\1\2-\3.\4/' \
         $HOME/tmp/votes.last | sort -u
}

which_guard "ssed"
which_guard "pstree"

if [ "$#" -eq 1 ]; then
    [ "$1" == "complete" ] && mode="$1"
    [ "$1" == "daily" ] && mode="$1"
    [ "$1" == "hourly" ] && mode="$1"
fi

[ -z "$mode" ] && usage

pid_file_guard

# Clean up after previous runs
rm -f $HOME/tmp/*.last $HOME/tmp/bills.updated

bills_args="--timeout=60 --congress=$congress --force --log=info"
amendments_args="--timeout=60 --congress=$congress --force --log=info"
if [ "$mode" == "hourly" ]; then
    bills_args="$bills_args --fast"
    amendments_args="$amendments_args --fast"
fi
# Scrape bills and amendments sequentially to avoid having amendment files
# that reference bills which we have not yet scraped.
( ./run bills $bills_args \
      2>&1 | tee -a $HOME/log/bills.log > $HOME/tmp/bills.last &&
  run_with_tmp_out "$HOME/tmp/bills.updated" collect_updated_bills &&
  ./run amendments $amendments_args \
      2>&1 | tee -a $HOME/log/amendments.log > $HOME/tmp/amendments.last &&
  run_with_tmp_out "$HOME/tmp/amendments.updated" collect_updated_amendments ) &

votes_args="--timeout=60 --congress=$congress --session=$session --force --log=info"
if [ "$mode" == "hourly" ]; then
    votes_args="$votes_args --fast"
fi
( ./run votes $votes_args \
      2>&1 | tee -a $HOME/log/votes.log > $HOME/tmp/votes.last &&
  run_with_tmp_out "$HOME/tmp/votes.updated" collect_updated_votes ) &


if [ "$mode" == "complete" -o "$mode" == "daily" ]; then
    # The committee_meetings scraper does not have a fast mode. Don't run it too often.
    ( ./run committee_meetings --congress=$congress --log=info \
          2>&1 | tee -a $HOME/log/committee_meetings.log > $HOME/tmp/committee_meetings.last &&
      touch $HOME/tmp/committee_meetings.updated ) &

    ( ./run fdsys --collections=CRPT --store=mods --log=info \
          2>&1 | tee -a $HOME/log/fdsys_crpt.log > $HOME/tmp/fdsys_crpt.last &&
      touch $HOME/tmp/fdsys_crpt.updated ) &
fi

sleep 1
show_pstree

echo "Wait for all scrapers to finish..."
trap "show_pstree" SIGCHLD
wait




